// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RcSasProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RcSasProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RcSasProto {

namespace {

const ::google::protobuf::Descriptor* AddBusinessEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddBusinessEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateBusinessEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateBusinessEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteBusinessEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteBusinessEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RcSasProtocol_2eproto() {
  protobuf_AddDesc_RcSasProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RcSasProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  AddBusinessEntry_descriptor_ = file->message_type(0);
  static const int AddBusinessEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBusinessEntry, framework_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBusinessEntry, entry_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBusinessEntry, entry_port_),
  };
  AddBusinessEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddBusinessEntry_descriptor_,
      AddBusinessEntry::default_instance_,
      AddBusinessEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBusinessEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddBusinessEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddBusinessEntry));
  UpdateBusinessEntry_descriptor_ = file->message_type(1);
  static const int UpdateBusinessEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBusinessEntry, framework_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBusinessEntry, entry_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBusinessEntry, entry_port_),
  };
  UpdateBusinessEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateBusinessEntry_descriptor_,
      UpdateBusinessEntry::default_instance_,
      UpdateBusinessEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBusinessEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateBusinessEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateBusinessEntry));
  DeleteBusinessEntry_descriptor_ = file->message_type(2);
  static const int DeleteBusinessEntry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBusinessEntry, framework_instance_id_),
  };
  DeleteBusinessEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteBusinessEntry_descriptor_,
      DeleteBusinessEntry::default_instance_,
      DeleteBusinessEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBusinessEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteBusinessEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteBusinessEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RcSasProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddBusinessEntry_descriptor_, &AddBusinessEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateBusinessEntry_descriptor_, &UpdateBusinessEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteBusinessEntry_descriptor_, &DeleteBusinessEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RcSasProtocol_2eproto() {
  delete AddBusinessEntry::default_instance_;
  delete AddBusinessEntry_reflection_;
  delete UpdateBusinessEntry::default_instance_;
  delete UpdateBusinessEntry_reflection_;
  delete DeleteBusinessEntry::default_instance_;
  delete DeleteBusinessEntry_reflection_;
}

void protobuf_AddDesc_RcSasProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023RcSasProtocol.proto\022\nRcSasProto\"W\n\020Add"
    "BusinessEntry\022\035\n\025framework_instance_id\030\001"
    " \002(\r\022\020\n\010entry_ip\030\002 \002(\t\022\022\n\nentry_port\030\003 \002"
    "(\r\"Z\n\023UpdateBusinessEntry\022\035\n\025framework_i"
    "nstance_id\030\001 \002(\r\022\020\n\010entry_ip\030\002 \002(\t\022\022\n\nen"
    "try_port\030\003 \002(\r\"4\n\023DeleteBusinessEntry\022\035\n"
    "\025framework_instance_id\030\001 \002(\r", 268);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RcSasProtocol.proto", &protobuf_RegisterTypes);
  AddBusinessEntry::default_instance_ = new AddBusinessEntry();
  UpdateBusinessEntry::default_instance_ = new UpdateBusinessEntry();
  DeleteBusinessEntry::default_instance_ = new DeleteBusinessEntry();
  AddBusinessEntry::default_instance_->InitAsDefaultInstance();
  UpdateBusinessEntry::default_instance_->InitAsDefaultInstance();
  DeleteBusinessEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RcSasProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RcSasProtocol_2eproto {
  StaticDescriptorInitializer_RcSasProtocol_2eproto() {
    protobuf_AddDesc_RcSasProtocol_2eproto();
  }
} static_descriptor_initializer_RcSasProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AddBusinessEntry::kFrameworkInstanceIdFieldNumber;
const int AddBusinessEntry::kEntryIpFieldNumber;
const int AddBusinessEntry::kEntryPortFieldNumber;
#endif  // !_MSC_VER

AddBusinessEntry::AddBusinessEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddBusinessEntry::InitAsDefaultInstance() {
}

AddBusinessEntry::AddBusinessEntry(const AddBusinessEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddBusinessEntry::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_id_ = 0u;
  entry_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddBusinessEntry::~AddBusinessEntry() {
  SharedDtor();
}

void AddBusinessEntry::SharedDtor() {
  if (entry_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_ip_;
  }
  if (this != default_instance_) {
  }
}

void AddBusinessEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddBusinessEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddBusinessEntry_descriptor_;
}

const AddBusinessEntry& AddBusinessEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcSasProtocol_2eproto();
  return *default_instance_;
}

AddBusinessEntry* AddBusinessEntry::default_instance_ = NULL;

AddBusinessEntry* AddBusinessEntry::New() const {
  return new AddBusinessEntry;
}

void AddBusinessEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_instance_id_ = 0u;
    if (has_entry_ip()) {
      if (entry_ip_ != &::google::protobuf::internal::kEmptyString) {
        entry_ip_->clear();
      }
    }
    entry_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddBusinessEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry_ip;
        break;
      }

      // required string entry_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_ip().data(), this->entry_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entry_port;
        break;
      }

      // required uint32 entry_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_port_)));
          set_has_entry_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddBusinessEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_instance_id(), output);
  }

  // required string entry_ip = 2;
  if (has_entry_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_ip().data(), this->entry_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entry_ip(), output);
  }

  // required uint32 entry_port = 3;
  if (has_entry_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entry_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddBusinessEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_instance_id(), target);
  }

  // required string entry_ip = 2;
  if (has_entry_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_ip().data(), this->entry_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entry_ip(), target);
  }

  // required uint32 entry_port = 3;
  if (has_entry_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entry_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddBusinessEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_instance_id = 1;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }

    // required string entry_ip = 2;
    if (has_entry_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_ip());
    }

    // required uint32 entry_port = 3;
    if (has_entry_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddBusinessEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddBusinessEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddBusinessEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddBusinessEntry::MergeFrom(const AddBusinessEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
    if (from.has_entry_ip()) {
      set_entry_ip(from.entry_ip());
    }
    if (from.has_entry_port()) {
      set_entry_port(from.entry_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddBusinessEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddBusinessEntry::CopyFrom(const AddBusinessEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddBusinessEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddBusinessEntry::Swap(AddBusinessEntry* other) {
  if (other != this) {
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(entry_ip_, other->entry_ip_);
    std::swap(entry_port_, other->entry_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddBusinessEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddBusinessEntry_descriptor_;
  metadata.reflection = AddBusinessEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateBusinessEntry::kFrameworkInstanceIdFieldNumber;
const int UpdateBusinessEntry::kEntryIpFieldNumber;
const int UpdateBusinessEntry::kEntryPortFieldNumber;
#endif  // !_MSC_VER

UpdateBusinessEntry::UpdateBusinessEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateBusinessEntry::InitAsDefaultInstance() {
}

UpdateBusinessEntry::UpdateBusinessEntry(const UpdateBusinessEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateBusinessEntry::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_id_ = 0u;
  entry_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  entry_port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateBusinessEntry::~UpdateBusinessEntry() {
  SharedDtor();
}

void UpdateBusinessEntry::SharedDtor() {
  if (entry_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete entry_ip_;
  }
  if (this != default_instance_) {
  }
}

void UpdateBusinessEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateBusinessEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateBusinessEntry_descriptor_;
}

const UpdateBusinessEntry& UpdateBusinessEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcSasProtocol_2eproto();
  return *default_instance_;
}

UpdateBusinessEntry* UpdateBusinessEntry::default_instance_ = NULL;

UpdateBusinessEntry* UpdateBusinessEntry::New() const {
  return new UpdateBusinessEntry;
}

void UpdateBusinessEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_instance_id_ = 0u;
    if (has_entry_ip()) {
      if (entry_ip_ != &::google::protobuf::internal::kEmptyString) {
        entry_ip_->clear();
      }
    }
    entry_port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateBusinessEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entry_ip;
        break;
      }

      // required string entry_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_entry_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->entry_ip().data(), this->entry_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entry_port;
        break;
      }

      // required uint32 entry_port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entry_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entry_port_)));
          set_has_entry_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateBusinessEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_instance_id(), output);
  }

  // required string entry_ip = 2;
  if (has_entry_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_ip().data(), this->entry_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->entry_ip(), output);
  }

  // required uint32 entry_port = 3;
  if (has_entry_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->entry_port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateBusinessEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_instance_id(), target);
  }

  // required string entry_ip = 2;
  if (has_entry_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->entry_ip().data(), this->entry_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->entry_ip(), target);
  }

  // required uint32 entry_port = 3;
  if (has_entry_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->entry_port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateBusinessEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_instance_id = 1;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }

    // required string entry_ip = 2;
    if (has_entry_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->entry_ip());
    }

    // required uint32 entry_port = 3;
    if (has_entry_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entry_port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateBusinessEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateBusinessEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateBusinessEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateBusinessEntry::MergeFrom(const UpdateBusinessEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
    if (from.has_entry_ip()) {
      set_entry_ip(from.entry_ip());
    }
    if (from.has_entry_port()) {
      set_entry_port(from.entry_port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateBusinessEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateBusinessEntry::CopyFrom(const UpdateBusinessEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateBusinessEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void UpdateBusinessEntry::Swap(UpdateBusinessEntry* other) {
  if (other != this) {
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(entry_ip_, other->entry_ip_);
    std::swap(entry_port_, other->entry_port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateBusinessEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateBusinessEntry_descriptor_;
  metadata.reflection = UpdateBusinessEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteBusinessEntry::kFrameworkInstanceIdFieldNumber;
#endif  // !_MSC_VER

DeleteBusinessEntry::DeleteBusinessEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteBusinessEntry::InitAsDefaultInstance() {
}

DeleteBusinessEntry::DeleteBusinessEntry(const DeleteBusinessEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteBusinessEntry::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteBusinessEntry::~DeleteBusinessEntry() {
  SharedDtor();
}

void DeleteBusinessEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteBusinessEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteBusinessEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteBusinessEntry_descriptor_;
}

const DeleteBusinessEntry& DeleteBusinessEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcSasProtocol_2eproto();
  return *default_instance_;
}

DeleteBusinessEntry* DeleteBusinessEntry::default_instance_ = NULL;

DeleteBusinessEntry* DeleteBusinessEntry::New() const {
  return new DeleteBusinessEntry;
}

void DeleteBusinessEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteBusinessEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteBusinessEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteBusinessEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteBusinessEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_instance_id = 1;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteBusinessEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteBusinessEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteBusinessEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteBusinessEntry::MergeFrom(const DeleteBusinessEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteBusinessEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteBusinessEntry::CopyFrom(const DeleteBusinessEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteBusinessEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteBusinessEntry::Swap(DeleteBusinessEntry* other) {
  if (other != this) {
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteBusinessEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteBusinessEntry_descriptor_;
  metadata.reflection = DeleteBusinessEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RcSasProto

// @@protoc_insertion_point(global_scope)
