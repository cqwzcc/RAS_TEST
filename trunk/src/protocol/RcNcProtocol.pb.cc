// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RcNcProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RcNcProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RcNcProto {

namespace {

const ::google::protobuf::Descriptor* GpuResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GpuResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkIDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkIDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DockerImageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DockerImageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetAddress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetAddress_reflection_ = NULL;
const ::google::protobuf::Descriptor* Register_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Register_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartFrameworkRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartFrameworkRoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondStartFrameworkRoot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondStartFrameworkRoot_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartSlave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartSlave_reflection_ = NULL;
const ::google::protobuf::Descriptor* RespondStartSlave_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RespondStartSlave_reflection_ = NULL;
const ::google::protobuf::Descriptor* FrameworkResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FrameworkResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CloseModule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CloseModule_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerResourceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerResourceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RcNcProtocol_2eproto() {
  protobuf_AddDesc_RcNcProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RcNcProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  GpuResourceInfo_descriptor_ = file->message_type(0);
  static const int GpuResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, gpu_mem_size_),
  };
  GpuResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GpuResourceInfo_descriptor_,
      GpuResourceInfo::default_instance_,
      GpuResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpuResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GpuResourceInfo));
  ResourceInfo_descriptor_ = file->message_type(1);
  static const int ResourceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, cpu_mem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, gpu_resource_info_),
  };
  ResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResourceInfo_descriptor_,
      ResourceInfo::default_instance_,
      ResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResourceInfo));
  FrameworkIDInfo_descriptor_ = file->message_type(2);
  static const int FrameworkIDInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkIDInfo, framework_id_),
  };
  FrameworkIDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkIDInfo_descriptor_,
      FrameworkIDInfo::default_instance_,
      FrameworkIDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkIDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkIDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkIDInfo));
  FrameworkInstanceInfo_descriptor_ = file->message_type(3);
  static const int FrameworkInstanceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, framework_instance_id_),
  };
  FrameworkInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkInstanceInfo_descriptor_,
      FrameworkInstanceInfo::default_instance_,
      FrameworkInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkInstanceInfo));
  DockerImageInfo_descriptor_ = file->message_type(4);
  static const int DockerImageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageInfo, tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageInfo, locate_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageInfo, module_name_),
  };
  DockerImageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DockerImageInfo_descriptor_,
      DockerImageInfo::default_instance_,
      DockerImageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DockerImageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DockerImageInfo));
  NetAddress_descriptor_ = file->message_type(5);
  static const int NetAddress_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, port_),
  };
  NetAddress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetAddress_descriptor_,
      NetAddress::default_instance_,
      NetAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetAddress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetAddress));
  Register_descriptor_ = file->message_type(6);
  static const int Register_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, nc_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, nc_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, machine_total_resource_),
  };
  Register_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Register_descriptor_,
      Register::default_instance_,
      Register_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Register, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Register));
  StartFrameworkRoot_descriptor_ = file->message_type(7);
  static const int StartFrameworkRoot_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, docker_image_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, require_resource_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, listen_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, rc_address_),
  };
  StartFrameworkRoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartFrameworkRoot_descriptor_,
      StartFrameworkRoot::default_instance_,
      StartFrameworkRoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartFrameworkRoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartFrameworkRoot));
  RespondStartFrameworkRoot_descriptor_ = file->message_type(8);
  static const int RespondStartFrameworkRoot_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartFrameworkRoot, root_framework_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartFrameworkRoot, root_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartFrameworkRoot, root_pid_),
  };
  RespondStartFrameworkRoot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondStartFrameworkRoot_descriptor_,
      RespondStartFrameworkRoot::default_instance_,
      RespondStartFrameworkRoot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartFrameworkRoot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartFrameworkRoot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondStartFrameworkRoot));
  StartSlave_descriptor_ = file->message_type(9);
  static const int StartSlave_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, docker_image_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, listen_port_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, fm_master_net_address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, rc_net_address_),
  };
  StartSlave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartSlave_descriptor_,
      StartSlave::default_instance_,
      StartSlave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartSlave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartSlave));
  RespondStartSlave_descriptor_ = file->message_type(10);
  static const int RespondStartSlave_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartSlave, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartSlave, self_module_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartSlave, machine_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartSlave, module_pid_),
  };
  RespondStartSlave_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RespondStartSlave_descriptor_,
      RespondStartSlave::default_instance_,
      RespondStartSlave_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartSlave, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RespondStartSlave, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RespondStartSlave));
  FrameworkResourceInfo_descriptor_ = file->message_type(11);
  static const int FrameworkResourceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkResourceInfo, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkResourceInfo, resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkResourceInfo, module_pid_),
  };
  FrameworkResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FrameworkResourceInfo_descriptor_,
      FrameworkResourceInfo::default_instance_,
      FrameworkResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FrameworkResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FrameworkResourceInfo));
  CloseModule_descriptor_ = file->message_type(12);
  static const int CloseModule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseModule, framework_instance_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseModule, module_pid_),
  };
  CloseModule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CloseModule_descriptor_,
      CloseModule::default_instance_,
      CloseModule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseModule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CloseModule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CloseModule));
  MachineResourceInfo_descriptor_ = file->message_type(13);
  static const int MachineResourceInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, cpu_mem_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, cpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, net_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, disk_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, gpu_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, gpu_resource_info_),
  };
  MachineResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineResourceInfo_descriptor_,
      MachineResourceInfo::default_instance_,
      MachineResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineResourceInfo));
  ContainerResourceInfo_descriptor_ = file->message_type(14);
  static const int ContainerResourceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerResourceInfo, framework_instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerResourceInfo, resource_info_),
  };
  ContainerResourceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerResourceInfo_descriptor_,
      ContainerResourceInfo::default_instance_,
      ContainerResourceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerResourceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerResourceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerResourceInfo));
  MonitorInfo_descriptor_ = file->message_type(15);
  static const int MonitorInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, total_machine_resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, usage_machine_resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, rest_machine_resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, container_require_resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, container_usage_resource_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, crash_moudle_id_),
  };
  MonitorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonitorInfo_descriptor_,
      MonitorInfo::default_instance_,
      MonitorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonitorInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RcNcProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpuResourceInfo_descriptor_, &GpuResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResourceInfo_descriptor_, &ResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkIDInfo_descriptor_, &FrameworkIDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkInstanceInfo_descriptor_, &FrameworkInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DockerImageInfo_descriptor_, &DockerImageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetAddress_descriptor_, &NetAddress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Register_descriptor_, &Register::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartFrameworkRoot_descriptor_, &StartFrameworkRoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondStartFrameworkRoot_descriptor_, &RespondStartFrameworkRoot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartSlave_descriptor_, &StartSlave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RespondStartSlave_descriptor_, &RespondStartSlave::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FrameworkResourceInfo_descriptor_, &FrameworkResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CloseModule_descriptor_, &CloseModule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineResourceInfo_descriptor_, &MachineResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerResourceInfo_descriptor_, &ContainerResourceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonitorInfo_descriptor_, &MonitorInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RcNcProtocol_2eproto() {
  delete GpuResourceInfo::default_instance_;
  delete GpuResourceInfo_reflection_;
  delete ResourceInfo::default_instance_;
  delete ResourceInfo_reflection_;
  delete FrameworkIDInfo::default_instance_;
  delete FrameworkIDInfo_reflection_;
  delete FrameworkInstanceInfo::default_instance_;
  delete FrameworkInstanceInfo_reflection_;
  delete DockerImageInfo::default_instance_;
  delete DockerImageInfo_reflection_;
  delete NetAddress::default_instance_;
  delete NetAddress_reflection_;
  delete Register::default_instance_;
  delete Register_reflection_;
  delete StartFrameworkRoot::default_instance_;
  delete StartFrameworkRoot_reflection_;
  delete RespondStartFrameworkRoot::default_instance_;
  delete RespondStartFrameworkRoot_reflection_;
  delete StartSlave::default_instance_;
  delete StartSlave_reflection_;
  delete RespondStartSlave::default_instance_;
  delete RespondStartSlave_reflection_;
  delete FrameworkResourceInfo::default_instance_;
  delete FrameworkResourceInfo_reflection_;
  delete CloseModule::default_instance_;
  delete CloseModule_reflection_;
  delete MachineResourceInfo::default_instance_;
  delete MachineResourceInfo_reflection_;
  delete ContainerResourceInfo::default_instance_;
  delete ContainerResourceInfo_reflection_;
  delete MonitorInfo::default_instance_;
  delete MonitorInfo_reflection_;
}

void protobuf_AddDesc_RcNcProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022RcNcProtocol.proto\022\tRcNcProto\"9\n\017GpuRe"
    "sourceInfo\022\020\n\010gpu_name\030\001 \002(\t\022\024\n\014gpu_mem_"
    "size\030\002 \001(\r\"}\n\014ResourceInfo\022\017\n\007cpu_num\030\001 "
    "\002(\001\022\024\n\014cpu_mem_size\030\002 \002(\r\022\017\n\007gpu_num\030\003 \001"
    "(\r\0225\n\021gpu_resource_info\030\004 \003(\0132\032.RcNcProt"
    "o.GpuResourceInfo\"\'\n\017FrameworkIDInfo\022\024\n\014"
    "framework_id\030\001 \002(\r\"L\n\025FrameworkInstanceI"
    "nfo\022\024\n\014framework_id\030\001 \002(\r\022\035\n\025framework_i"
    "nstance_id\030\002 \002(\r\"H\n\017DockerImageInfo\022\013\n\003t"
    "ag\030\001 \002(\t\022\023\n\013locate_file\030\002 \001(\t\022\023\n\013module_"
    "name\030\003 \001(\t\"&\n\nNetAddress\022\n\n\002ip\030\001 \002(\t\022\014\n\004"
    "port\030\002 \001(\r\"c\n\010Register\022\r\n\005nc_ip\030\001 \002(\t\022\017\n"
    "\007nc_port\030\002 \001(\r\0227\n\026machine_total_resource"
    "\030\003 \001(\0132\027.RcNcProto.ResourceInfo\"\230\002\n\022Star"
    "tFrameworkRoot\022A\n\027framework_instance_inf"
    "o\030\001 \002(\0132 .RcNcProto.FrameworkInstanceInf"
    "o\022\026\n\016self_module_id\030\002 \002(\r\0225\n\021docker_imag"
    "e_info\030\003 \001(\0132\032.RcNcProto.DockerImageInfo"
    "\0221\n\020require_resource\030\004 \001(\0132\027.RcNcProto.R"
    "esourceInfo\022\022\n\nlisten_num\030\005 \001(\r\022)\n\nRC_ad"
    "dress\030\006 \001(\0132\025.RcNcProto.NetAddress\"\204\001\n\031R"
    "espondStartFrameworkRoot\022D\n\032root_framewo"
    "rk_instance_id\030\001 \002(\0132 .RcNcProto.Framewo"
    "rkInstanceInfo\022\017\n\007root_ip\030\002 \001(\t\022\020\n\010root_"
    "PID\030\003 \001(\r\"\314\002\n\nStartSlave\022A\n\027framework_in"
    "stance_info\030\001 \002(\0132 .RcNcProto.FrameworkI"
    "nstanceInfo\022\026\n\016self_module_id\030\002 \002(\r\0225\n\021d"
    "ocker_image_info\030\003 \001(\0132\032.RcNcProto.Docke"
    "rImageInfo\022.\n\rresource_info\030\004 \001(\0132\027.RcNc"
    "Proto.ResourceInfo\022\027\n\017listen_port_num\030\005 "
    "\001(\r\0224\n\025FM_master_net_address\030\006 \001(\0132\025.RcN"
    "cProto.NetAddress\022-\n\016RC_net_address\030\007 \001("
    "\0132\025.RcNcProto.NetAddress\"\226\001\n\021RespondStar"
    "tSlave\022A\n\027framework_instance_info\030\001 \002(\0132"
    " .RcNcProto.FrameworkInstanceInfo\022\026\n\016sel"
    "f_module_id\030\002 \002(\r\022\022\n\nmachine_ip\030\003 \001(\t\022\022\n"
    "\nmodule_PID\030\004 \001(\r\"\236\001\n\025FrameworkResourceI"
    "nfo\022A\n\027framework_instance_info\030\001 \002(\0132 .R"
    "cNcProto.FrameworkInstanceInfo\022.\n\rresour"
    "ce_info\030\002 \001(\0132\027.RcNcProto.ResourceInfo\022\022"
    "\n\nmodule_PID\030\003 \001(\r\"d\n\013CloseModule\022A\n\027fra"
    "mework_instance_info\030\001 \002(\0132 .RcNcProto.F"
    "rameworkInstanceInfo\022\022\n\nmodule_PID\030\002 \003(\r"
    "\"\252\001\n\023MachineResourceInfo\022\024\n\014cpu_mem_size"
    "\030\001 \002(\r\022\017\n\007cpu_num\030\002 \001(\001\022\021\n\tnet_speed\030\003 \001"
    "(\r\022\021\n\tdisk_size\030\004 \001(\r\022\017\n\007gpu_num\030\005 \001(\r\0225"
    "\n\021gpu_resource_info\030\006 \003(\0132\032.RcNcProto.Gp"
    "uResourceInfo\"f\n\025ContainerResourceInfo\022\035"
    "\n\025framework_instance_id\030\001 \002(\r\022.\n\rresourc"
    "e_info\030\002 \001(\0132\027.RcNcProto.ResourceInfo\"\201\003"
    "\n\013MonitorInfo\022C\n\033total_machine_resource_"
    "info\030\001 \002(\0132\036.RcNcProto.MachineResourceIn"
    "fo\022C\n\033usage_machine_resource_info\030\002 \001(\0132"
    "\036.RcNcProto.MachineResourceInfo\022;\n\032rest_"
    "machine_resource_info\030\003 \001(\0132\027.RcNcProto."
    "ResourceInfo\022I\n\037container_require_resour"
    "ce_info\030\004 \003(\0132 .RcNcProto.ContainerResou"
    "rceInfo\022G\n\035container_usage_resource_info"
    "\030\005 \003(\0132 .RcNcProto.ContainerResourceInfo"
    "\022\027\n\017crash_moudle_id\030\006 \003(\r", 2385);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RcNcProtocol.proto", &protobuf_RegisterTypes);
  GpuResourceInfo::default_instance_ = new GpuResourceInfo();
  ResourceInfo::default_instance_ = new ResourceInfo();
  FrameworkIDInfo::default_instance_ = new FrameworkIDInfo();
  FrameworkInstanceInfo::default_instance_ = new FrameworkInstanceInfo();
  DockerImageInfo::default_instance_ = new DockerImageInfo();
  NetAddress::default_instance_ = new NetAddress();
  Register::default_instance_ = new Register();
  StartFrameworkRoot::default_instance_ = new StartFrameworkRoot();
  RespondStartFrameworkRoot::default_instance_ = new RespondStartFrameworkRoot();
  StartSlave::default_instance_ = new StartSlave();
  RespondStartSlave::default_instance_ = new RespondStartSlave();
  FrameworkResourceInfo::default_instance_ = new FrameworkResourceInfo();
  CloseModule::default_instance_ = new CloseModule();
  MachineResourceInfo::default_instance_ = new MachineResourceInfo();
  ContainerResourceInfo::default_instance_ = new ContainerResourceInfo();
  MonitorInfo::default_instance_ = new MonitorInfo();
  GpuResourceInfo::default_instance_->InitAsDefaultInstance();
  ResourceInfo::default_instance_->InitAsDefaultInstance();
  FrameworkIDInfo::default_instance_->InitAsDefaultInstance();
  FrameworkInstanceInfo::default_instance_->InitAsDefaultInstance();
  DockerImageInfo::default_instance_->InitAsDefaultInstance();
  NetAddress::default_instance_->InitAsDefaultInstance();
  Register::default_instance_->InitAsDefaultInstance();
  StartFrameworkRoot::default_instance_->InitAsDefaultInstance();
  RespondStartFrameworkRoot::default_instance_->InitAsDefaultInstance();
  StartSlave::default_instance_->InitAsDefaultInstance();
  RespondStartSlave::default_instance_->InitAsDefaultInstance();
  FrameworkResourceInfo::default_instance_->InitAsDefaultInstance();
  CloseModule::default_instance_->InitAsDefaultInstance();
  MachineResourceInfo::default_instance_->InitAsDefaultInstance();
  ContainerResourceInfo::default_instance_->InitAsDefaultInstance();
  MonitorInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RcNcProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RcNcProtocol_2eproto {
  StaticDescriptorInitializer_RcNcProtocol_2eproto() {
    protobuf_AddDesc_RcNcProtocol_2eproto();
  }
} static_descriptor_initializer_RcNcProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GpuResourceInfo::kGpuNameFieldNumber;
const int GpuResourceInfo::kGpuMemSizeFieldNumber;
#endif  // !_MSC_VER

GpuResourceInfo::GpuResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GpuResourceInfo::InitAsDefaultInstance() {
}

GpuResourceInfo::GpuResourceInfo(const GpuResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GpuResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  gpu_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gpu_mem_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpuResourceInfo::~GpuResourceInfo() {
  SharedDtor();
}

void GpuResourceInfo::SharedDtor() {
  if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
    delete gpu_name_;
  }
  if (this != default_instance_) {
  }
}

void GpuResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GpuResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpuResourceInfo_descriptor_;
}

const GpuResourceInfo& GpuResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

GpuResourceInfo* GpuResourceInfo::default_instance_ = NULL;

GpuResourceInfo* GpuResourceInfo::New() const {
  return new GpuResourceInfo;
}

void GpuResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gpu_name()) {
      if (gpu_name_ != &::google::protobuf::internal::kEmptyString) {
        gpu_name_->clear();
      }
    }
    gpu_mem_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpuResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string gpu_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gpu_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gpu_name().data(), this->gpu_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gpu_mem_size;
        break;
      }

      // optional uint32 gpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_mem_size_)));
          set_has_gpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GpuResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->gpu_name(), output);
  }

  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gpu_mem_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GpuResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string gpu_name = 1;
  if (has_gpu_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gpu_name().data(), this->gpu_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->gpu_name(), target);
  }

  // optional uint32 gpu_mem_size = 2;
  if (has_gpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gpu_mem_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GpuResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string gpu_name = 1;
    if (has_gpu_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gpu_name());
    }

    // optional uint32 gpu_mem_size = 2;
    if (has_gpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_mem_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpuResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpuResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GpuResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpuResourceInfo::MergeFrom(const GpuResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpu_name()) {
      set_gpu_name(from.gpu_name());
    }
    if (from.has_gpu_mem_size()) {
      set_gpu_mem_size(from.gpu_mem_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpuResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpuResourceInfo::CopyFrom(const GpuResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpuResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GpuResourceInfo::Swap(GpuResourceInfo* other) {
  if (other != this) {
    std::swap(gpu_name_, other->gpu_name_);
    std::swap(gpu_mem_size_, other->gpu_mem_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GpuResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GpuResourceInfo_descriptor_;
  metadata.reflection = GpuResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResourceInfo::kCpuNumFieldNumber;
const int ResourceInfo::kCpuMemSizeFieldNumber;
const int ResourceInfo::kGpuNumFieldNumber;
const int ResourceInfo::kGpuResourceInfoFieldNumber;
#endif  // !_MSC_VER

ResourceInfo::ResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResourceInfo::InitAsDefaultInstance() {
}

ResourceInfo::ResourceInfo(const ResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_num_ = 0;
  cpu_mem_size_ = 0u;
  gpu_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResourceInfo::~ResourceInfo() {
  SharedDtor();
}

void ResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResourceInfo_descriptor_;
}

const ResourceInfo& ResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

ResourceInfo* ResourceInfo::default_instance_ = NULL;

ResourceInfo* ResourceInfo::New() const {
  return new ResourceInfo;
}

void ResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_num_ = 0;
    cpu_mem_size_ = 0u;
    gpu_num_ = 0u;
  }
  gpu_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double cpu_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cpu_mem_size;
        break;
      }

      // required uint32 cpu_mem_size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpu_mem_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_mem_size_)));
          set_has_cpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gpu_num;
        break;
      }

      // optional uint32 gpu_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_num_)));
          set_has_gpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        break;
      }

      // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpu_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpu_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gpu_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->cpu_num(), output);
  }

  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cpu_mem_size(), output);
  }

  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gpu_num(), output);
  }

  // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpu_resource_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double cpu_num = 1;
  if (has_cpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->cpu_num(), target);
  }

  // required uint32 cpu_mem_size = 2;
  if (has_cpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cpu_mem_size(), target);
  }

  // optional uint32 gpu_num = 3;
  if (has_gpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gpu_num(), target);
  }

  // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 4;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpu_resource_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double cpu_num = 1;
    if (has_cpu_num()) {
      total_size += 1 + 8;
    }

    // required uint32 cpu_mem_size = 2;
    if (has_cpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_mem_size());
    }

    // optional uint32 gpu_num = 3;
    if (has_gpu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_num());
    }

  }
  // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 4;
  total_size += 1 * this->gpu_resource_info_size();
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpu_resource_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResourceInfo::MergeFrom(const ResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpu_resource_info_.MergeFrom(from.gpu_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_cpu_mem_size()) {
      set_cpu_mem_size(from.cpu_mem_size());
    }
    if (from.has_gpu_num()) {
      set_gpu_num(from.gpu_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourceInfo::CopyFrom(const ResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < gpu_resource_info_size(); i++) {
    if (!this->gpu_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void ResourceInfo::Swap(ResourceInfo* other) {
  if (other != this) {
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(cpu_mem_size_, other->cpu_mem_size_);
    std::swap(gpu_num_, other->gpu_num_);
    gpu_resource_info_.Swap(&other->gpu_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResourceInfo_descriptor_;
  metadata.reflection = ResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkIDInfo::kFrameworkIdFieldNumber;
#endif  // !_MSC_VER

FrameworkIDInfo::FrameworkIDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkIDInfo::InitAsDefaultInstance() {
}

FrameworkIDInfo::FrameworkIDInfo(const FrameworkIDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkIDInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkIDInfo::~FrameworkIDInfo() {
  SharedDtor();
}

void FrameworkIDInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkIDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkIDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkIDInfo_descriptor_;
}

const FrameworkIDInfo& FrameworkIDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

FrameworkIDInfo* FrameworkIDInfo::default_instance_ = NULL;

FrameworkIDInfo* FrameworkIDInfo::New() const {
  return new FrameworkIDInfo;
}

void FrameworkIDInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkIDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkIDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkIDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkIDInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkIDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkIDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkIDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkIDInfo::MergeFrom(const FrameworkIDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkIDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkIDInfo::CopyFrom(const FrameworkIDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkIDInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FrameworkIDInfo::Swap(FrameworkIDInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkIDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkIDInfo_descriptor_;
  metadata.reflection = FrameworkIDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkInstanceInfo::kFrameworkIdFieldNumber;
const int FrameworkInstanceInfo::kFrameworkInstanceIdFieldNumber;
#endif  // !_MSC_VER

FrameworkInstanceInfo::FrameworkInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkInstanceInfo::InitAsDefaultInstance() {
}

FrameworkInstanceInfo::FrameworkInstanceInfo(const FrameworkInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_id_ = 0u;
  framework_instance_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkInstanceInfo::~FrameworkInstanceInfo() {
  SharedDtor();
}

void FrameworkInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FrameworkInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkInstanceInfo_descriptor_;
}

const FrameworkInstanceInfo& FrameworkInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

FrameworkInstanceInfo* FrameworkInstanceInfo::default_instance_ = NULL;

FrameworkInstanceInfo* FrameworkInstanceInfo::New() const {
  return new FrameworkInstanceInfo;
}

void FrameworkInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_id_ = 0u;
    framework_instance_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_id_)));
          set_has_framework_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_framework_instance_id;
        break;
      }

      // required uint32 framework_instance_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_framework_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_id(), output);
  }

  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->framework_instance_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_id = 1;
  if (has_framework_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_id(), target);
  }

  // required uint32 framework_instance_id = 2;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->framework_instance_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkInstanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_id = 1;
    if (has_framework_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_id());
    }

    // required uint32 framework_instance_id = 2;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkInstanceInfo::MergeFrom(const FrameworkInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_id()) {
      set_framework_id(from.framework_id());
    }
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkInstanceInfo::CopyFrom(const FrameworkInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkInstanceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FrameworkInstanceInfo::Swap(FrameworkInstanceInfo* other) {
  if (other != this) {
    std::swap(framework_id_, other->framework_id_);
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkInstanceInfo_descriptor_;
  metadata.reflection = FrameworkInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DockerImageInfo::kTagFieldNumber;
const int DockerImageInfo::kLocateFileFieldNumber;
const int DockerImageInfo::kModuleNameFieldNumber;
#endif  // !_MSC_VER

DockerImageInfo::DockerImageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DockerImageInfo::InitAsDefaultInstance() {
}

DockerImageInfo::DockerImageInfo(const DockerImageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DockerImageInfo::SharedCtor() {
  _cached_size_ = 0;
  tag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  locate_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DockerImageInfo::~DockerImageInfo() {
  SharedDtor();
}

void DockerImageInfo::SharedDtor() {
  if (tag_ != &::google::protobuf::internal::kEmptyString) {
    delete tag_;
  }
  if (locate_file_ != &::google::protobuf::internal::kEmptyString) {
    delete locate_file_;
  }
  if (module_name_ != &::google::protobuf::internal::kEmptyString) {
    delete module_name_;
  }
  if (this != default_instance_) {
  }
}

void DockerImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DockerImageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DockerImageInfo_descriptor_;
}

const DockerImageInfo& DockerImageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

DockerImageInfo* DockerImageInfo::default_instance_ = NULL;

DockerImageInfo* DockerImageInfo::New() const {
  return new DockerImageInfo;
}

void DockerImageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tag()) {
      if (tag_ != &::google::protobuf::internal::kEmptyString) {
        tag_->clear();
      }
    }
    if (has_locate_file()) {
      if (locate_file_ != &::google::protobuf::internal::kEmptyString) {
        locate_file_->clear();
      }
    }
    if (has_module_name()) {
      if (module_name_ != &::google::protobuf::internal::kEmptyString) {
        module_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DockerImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tag().data(), this->tag().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_locate_file;
        break;
      }

      // optional string locate_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_locate_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_locate_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->locate_file().data(), this->locate_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_module_name;
        break;
      }

      // optional string module_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module_name().data(), this->module_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DockerImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tag(), output);
  }

  // optional string locate_file = 2;
  if (has_locate_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locate_file().data(), this->locate_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->locate_file(), output);
  }

  // optional string module_name = 3;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->module_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DockerImageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tag = 1;
  if (has_tag()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tag().data(), this->tag().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tag(), target);
  }

  // optional string locate_file = 2;
  if (has_locate_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->locate_file().data(), this->locate_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->locate_file(), target);
  }

  // optional string module_name = 3;
  if (has_module_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module_name().data(), this->module_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->module_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DockerImageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tag = 1;
    if (has_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional string locate_file = 2;
    if (has_locate_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->locate_file());
    }

    // optional string module_name = 3;
    if (has_module_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DockerImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DockerImageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DockerImageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DockerImageInfo::MergeFrom(const DockerImageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tag()) {
      set_tag(from.tag());
    }
    if (from.has_locate_file()) {
      set_locate_file(from.locate_file());
    }
    if (from.has_module_name()) {
      set_module_name(from.module_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DockerImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DockerImageInfo::CopyFrom(const DockerImageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DockerImageInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DockerImageInfo::Swap(DockerImageInfo* other) {
  if (other != this) {
    std::swap(tag_, other->tag_);
    std::swap(locate_file_, other->locate_file_);
    std::swap(module_name_, other->module_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DockerImageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DockerImageInfo_descriptor_;
  metadata.reflection = DockerImageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetAddress::kIpFieldNumber;
const int NetAddress::kPortFieldNumber;
#endif  // !_MSC_VER

NetAddress::NetAddress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetAddress::InitAsDefaultInstance() {
}

NetAddress::NetAddress(const NetAddress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetAddress::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetAddress::~NetAddress() {
  SharedDtor();
}

void NetAddress::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void NetAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetAddress_descriptor_;
}

const NetAddress& NetAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

NetAddress* NetAddress::default_instance_ = NULL;

NetAddress* NetAddress::New() const {
  return new NetAddress;
}

void NetAddress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetAddress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetAddress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetAddress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetAddress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetAddress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetAddress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetAddress::MergeFrom(const NetAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetAddress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetAddress::CopyFrom(const NetAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NetAddress::Swap(NetAddress* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetAddress_descriptor_;
  metadata.reflection = NetAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Register::kNcIpFieldNumber;
const int Register::kNcPortFieldNumber;
const int Register::kMachineTotalResourceFieldNumber;
#endif  // !_MSC_VER

Register::Register()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Register::InitAsDefaultInstance() {
  machine_total_resource_ = const_cast< ::RcNcProto::ResourceInfo*>(&::RcNcProto::ResourceInfo::default_instance());
}

Register::Register(const Register& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Register::SharedCtor() {
  _cached_size_ = 0;
  nc_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nc_port_ = 0u;
  machine_total_resource_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Register::~Register() {
  SharedDtor();
}

void Register::SharedDtor() {
  if (nc_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete nc_ip_;
  }
  if (this != default_instance_) {
    delete machine_total_resource_;
  }
}

void Register::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Register::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Register_descriptor_;
}

const Register& Register::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

Register* Register::default_instance_ = NULL;

Register* Register::New() const {
  return new Register;
}

void Register::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_nc_ip()) {
      if (nc_ip_ != &::google::protobuf::internal::kEmptyString) {
        nc_ip_->clear();
      }
    }
    nc_port_ = 0u;
    if (has_machine_total_resource()) {
      if (machine_total_resource_ != NULL) machine_total_resource_->::RcNcProto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Register::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string nc_ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nc_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->nc_ip().data(), this->nc_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nc_port;
        break;
      }

      // optional uint32 nc_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nc_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &nc_port_)));
          set_has_nc_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_total_resource;
        break;
      }

      // optional .RcNcProto.ResourceInfo machine_total_resource = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_total_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machine_total_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Register::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string nc_ip = 1;
  if (has_nc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nc_ip().data(), this->nc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->nc_ip(), output);
  }

  // optional uint32 nc_port = 2;
  if (has_nc_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->nc_port(), output);
  }

  // optional .RcNcProto.ResourceInfo machine_total_resource = 3;
  if (has_machine_total_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->machine_total_resource(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Register::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string nc_ip = 1;
  if (has_nc_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->nc_ip().data(), this->nc_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nc_ip(), target);
  }

  // optional uint32 nc_port = 2;
  if (has_nc_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->nc_port(), target);
  }

  // optional .RcNcProto.ResourceInfo machine_total_resource = 3;
  if (has_machine_total_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->machine_total_resource(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Register::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string nc_ip = 1;
    if (has_nc_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->nc_ip());
    }

    // optional uint32 nc_port = 2;
    if (has_nc_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->nc_port());
    }

    // optional .RcNcProto.ResourceInfo machine_total_resource = 3;
    if (has_machine_total_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machine_total_resource());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Register::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Register* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Register*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Register::MergeFrom(const Register& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nc_ip()) {
      set_nc_ip(from.nc_ip());
    }
    if (from.has_nc_port()) {
      set_nc_port(from.nc_port());
    }
    if (from.has_machine_total_resource()) {
      mutable_machine_total_resource()->::RcNcProto::ResourceInfo::MergeFrom(from.machine_total_resource());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Register::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Register::CopyFrom(const Register& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Register::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_machine_total_resource()) {
    if (!this->machine_total_resource().IsInitialized()) return false;
  }
  return true;
}

void Register::Swap(Register* other) {
  if (other != this) {
    std::swap(nc_ip_, other->nc_ip_);
    std::swap(nc_port_, other->nc_port_);
    std::swap(machine_total_resource_, other->machine_total_resource_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Register::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Register_descriptor_;
  metadata.reflection = Register_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartFrameworkRoot::kFrameworkInstanceInfoFieldNumber;
const int StartFrameworkRoot::kSelfModuleIdFieldNumber;
const int StartFrameworkRoot::kDockerImageInfoFieldNumber;
const int StartFrameworkRoot::kRequireResourceFieldNumber;
const int StartFrameworkRoot::kListenNumFieldNumber;
const int StartFrameworkRoot::kRCAddressFieldNumber;
#endif  // !_MSC_VER

StartFrameworkRoot::StartFrameworkRoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartFrameworkRoot::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::RcNcProto::FrameworkInstanceInfo*>(&::RcNcProto::FrameworkInstanceInfo::default_instance());
  docker_image_info_ = const_cast< ::RcNcProto::DockerImageInfo*>(&::RcNcProto::DockerImageInfo::default_instance());
  require_resource_ = const_cast< ::RcNcProto::ResourceInfo*>(&::RcNcProto::ResourceInfo::default_instance());
  rc_address_ = const_cast< ::RcNcProto::NetAddress*>(&::RcNcProto::NetAddress::default_instance());
}

StartFrameworkRoot::StartFrameworkRoot(const StartFrameworkRoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartFrameworkRoot::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  docker_image_info_ = NULL;
  require_resource_ = NULL;
  listen_num_ = 0u;
  rc_address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartFrameworkRoot::~StartFrameworkRoot() {
  SharedDtor();
}

void StartFrameworkRoot::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete docker_image_info_;
    delete require_resource_;
    delete rc_address_;
  }
}

void StartFrameworkRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartFrameworkRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartFrameworkRoot_descriptor_;
}

const StartFrameworkRoot& StartFrameworkRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

StartFrameworkRoot* StartFrameworkRoot::default_instance_ = NULL;

StartFrameworkRoot* StartFrameworkRoot::New() const {
  return new StartFrameworkRoot;
}

void StartFrameworkRoot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::RcNcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
    if (has_docker_image_info()) {
      if (docker_image_info_ != NULL) docker_image_info_->::RcNcProto::DockerImageInfo::Clear();
    }
    if (has_require_resource()) {
      if (require_resource_ != NULL) require_resource_->::RcNcProto::ResourceInfo::Clear();
    }
    listen_num_ = 0u;
    if (has_rc_address()) {
      if (rc_address_ != NULL) rc_address_->::RcNcProto::NetAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartFrameworkRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }

      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_docker_image_info;
        break;
      }

      // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docker_image_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docker_image_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_require_resource;
        break;
      }

      // optional .RcNcProto.ResourceInfo require_resource = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_require_resource:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_require_resource()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_listen_num;
        break;
      }

      // optional uint32 listen_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_num_)));
          set_has_listen_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_RC_address;
        break;
      }

      // optional .RcNcProto.NetAddress RC_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RC_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartFrameworkRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }

  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }

  // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
  if (has_docker_image_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->docker_image_info(), output);
  }

  // optional .RcNcProto.ResourceInfo require_resource = 4;
  if (has_require_resource()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->require_resource(), output);
  }

  // optional uint32 listen_num = 5;
  if (has_listen_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->listen_num(), output);
  }

  // optional .RcNcProto.NetAddress RC_address = 6;
  if (has_rc_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rc_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartFrameworkRoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }

  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }

  // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
  if (has_docker_image_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->docker_image_info(), target);
  }

  // optional .RcNcProto.ResourceInfo require_resource = 4;
  if (has_require_resource()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->require_resource(), target);
  }

  // optional uint32 listen_num = 5;
  if (has_listen_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->listen_num(), target);
  }

  // optional .RcNcProto.NetAddress RC_address = 6;
  if (has_rc_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->rc_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartFrameworkRoot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }

    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }

    // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
    if (has_docker_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docker_image_info());
    }

    // optional .RcNcProto.ResourceInfo require_resource = 4;
    if (has_require_resource()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->require_resource());
    }

    // optional uint32 listen_num = 5;
    if (has_listen_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_num());
    }

    // optional .RcNcProto.NetAddress RC_address = 6;
    if (has_rc_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartFrameworkRoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartFrameworkRoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartFrameworkRoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartFrameworkRoot::MergeFrom(const StartFrameworkRoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::RcNcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
    if (from.has_docker_image_info()) {
      mutable_docker_image_info()->::RcNcProto::DockerImageInfo::MergeFrom(from.docker_image_info());
    }
    if (from.has_require_resource()) {
      mutable_require_resource()->::RcNcProto::ResourceInfo::MergeFrom(from.require_resource());
    }
    if (from.has_listen_num()) {
      set_listen_num(from.listen_num());
    }
    if (from.has_rc_address()) {
      mutable_rc_address()->::RcNcProto::NetAddress::MergeFrom(from.rc_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartFrameworkRoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartFrameworkRoot::CopyFrom(const StartFrameworkRoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartFrameworkRoot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  if (has_docker_image_info()) {
    if (!this->docker_image_info().IsInitialized()) return false;
  }
  if (has_require_resource()) {
    if (!this->require_resource().IsInitialized()) return false;
  }
  if (has_rc_address()) {
    if (!this->rc_address().IsInitialized()) return false;
  }
  return true;
}

void StartFrameworkRoot::Swap(StartFrameworkRoot* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    std::swap(docker_image_info_, other->docker_image_info_);
    std::swap(require_resource_, other->require_resource_);
    std::swap(listen_num_, other->listen_num_);
    std::swap(rc_address_, other->rc_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartFrameworkRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartFrameworkRoot_descriptor_;
  metadata.reflection = StartFrameworkRoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondStartFrameworkRoot::kRootFrameworkInstanceIdFieldNumber;
const int RespondStartFrameworkRoot::kRootIpFieldNumber;
const int RespondStartFrameworkRoot::kRootPIDFieldNumber;
#endif  // !_MSC_VER

RespondStartFrameworkRoot::RespondStartFrameworkRoot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondStartFrameworkRoot::InitAsDefaultInstance() {
  root_framework_instance_id_ = const_cast< ::RcNcProto::FrameworkInstanceInfo*>(&::RcNcProto::FrameworkInstanceInfo::default_instance());
}

RespondStartFrameworkRoot::RespondStartFrameworkRoot(const RespondStartFrameworkRoot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondStartFrameworkRoot::SharedCtor() {
  _cached_size_ = 0;
  root_framework_instance_id_ = NULL;
  root_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  root_pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondStartFrameworkRoot::~RespondStartFrameworkRoot() {
  SharedDtor();
}

void RespondStartFrameworkRoot::SharedDtor() {
  if (root_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete root_ip_;
  }
  if (this != default_instance_) {
    delete root_framework_instance_id_;
  }
}

void RespondStartFrameworkRoot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondStartFrameworkRoot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondStartFrameworkRoot_descriptor_;
}

const RespondStartFrameworkRoot& RespondStartFrameworkRoot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

RespondStartFrameworkRoot* RespondStartFrameworkRoot::default_instance_ = NULL;

RespondStartFrameworkRoot* RespondStartFrameworkRoot::New() const {
  return new RespondStartFrameworkRoot;
}

void RespondStartFrameworkRoot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_root_framework_instance_id()) {
      if (root_framework_instance_id_ != NULL) root_framework_instance_id_->::RcNcProto::FrameworkInstanceInfo::Clear();
    }
    if (has_root_ip()) {
      if (root_ip_ != &::google::protobuf::internal::kEmptyString) {
        root_ip_->clear();
      }
    }
    root_pid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondStartFrameworkRoot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.FrameworkInstanceInfo root_framework_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_framework_instance_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_root_ip;
        break;
      }

      // optional string root_ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_root_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_root_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->root_ip().data(), this->root_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_root_PID;
        break;
      }

      // optional uint32 root_PID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_root_PID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &root_pid_)));
          set_has_root_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondStartFrameworkRoot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.FrameworkInstanceInfo root_framework_instance_id = 1;
  if (has_root_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->root_framework_instance_id(), output);
  }

  // optional string root_ip = 2;
  if (has_root_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_ip().data(), this->root_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->root_ip(), output);
  }

  // optional uint32 root_PID = 3;
  if (has_root_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->root_pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondStartFrameworkRoot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.FrameworkInstanceInfo root_framework_instance_id = 1;
  if (has_root_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->root_framework_instance_id(), target);
  }

  // optional string root_ip = 2;
  if (has_root_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->root_ip().data(), this->root_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->root_ip(), target);
  }

  // optional uint32 root_PID = 3;
  if (has_root_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->root_pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondStartFrameworkRoot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.FrameworkInstanceInfo root_framework_instance_id = 1;
    if (has_root_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_framework_instance_id());
    }

    // optional string root_ip = 2;
    if (has_root_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->root_ip());
    }

    // optional uint32 root_PID = 3;
    if (has_root_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->root_pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondStartFrameworkRoot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondStartFrameworkRoot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondStartFrameworkRoot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondStartFrameworkRoot::MergeFrom(const RespondStartFrameworkRoot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root_framework_instance_id()) {
      mutable_root_framework_instance_id()->::RcNcProto::FrameworkInstanceInfo::MergeFrom(from.root_framework_instance_id());
    }
    if (from.has_root_ip()) {
      set_root_ip(from.root_ip());
    }
    if (from.has_root_pid()) {
      set_root_pid(from.root_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondStartFrameworkRoot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondStartFrameworkRoot::CopyFrom(const RespondStartFrameworkRoot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondStartFrameworkRoot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_root_framework_instance_id()) {
    if (!this->root_framework_instance_id().IsInitialized()) return false;
  }
  return true;
}

void RespondStartFrameworkRoot::Swap(RespondStartFrameworkRoot* other) {
  if (other != this) {
    std::swap(root_framework_instance_id_, other->root_framework_instance_id_);
    std::swap(root_ip_, other->root_ip_);
    std::swap(root_pid_, other->root_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondStartFrameworkRoot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondStartFrameworkRoot_descriptor_;
  metadata.reflection = RespondStartFrameworkRoot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartSlave::kFrameworkInstanceInfoFieldNumber;
const int StartSlave::kSelfModuleIdFieldNumber;
const int StartSlave::kDockerImageInfoFieldNumber;
const int StartSlave::kResourceInfoFieldNumber;
const int StartSlave::kListenPortNumFieldNumber;
const int StartSlave::kFMMasterNetAddressFieldNumber;
const int StartSlave::kRCNetAddressFieldNumber;
#endif  // !_MSC_VER

StartSlave::StartSlave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartSlave::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::RcNcProto::FrameworkInstanceInfo*>(&::RcNcProto::FrameworkInstanceInfo::default_instance());
  docker_image_info_ = const_cast< ::RcNcProto::DockerImageInfo*>(&::RcNcProto::DockerImageInfo::default_instance());
  resource_info_ = const_cast< ::RcNcProto::ResourceInfo*>(&::RcNcProto::ResourceInfo::default_instance());
  fm_master_net_address_ = const_cast< ::RcNcProto::NetAddress*>(&::RcNcProto::NetAddress::default_instance());
  rc_net_address_ = const_cast< ::RcNcProto::NetAddress*>(&::RcNcProto::NetAddress::default_instance());
}

StartSlave::StartSlave(const StartSlave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartSlave::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  docker_image_info_ = NULL;
  resource_info_ = NULL;
  listen_port_num_ = 0u;
  fm_master_net_address_ = NULL;
  rc_net_address_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartSlave::~StartSlave() {
  SharedDtor();
}

void StartSlave::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete docker_image_info_;
    delete resource_info_;
    delete fm_master_net_address_;
    delete rc_net_address_;
  }
}

void StartSlave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartSlave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartSlave_descriptor_;
}

const StartSlave& StartSlave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

StartSlave* StartSlave::default_instance_ = NULL;

StartSlave* StartSlave::New() const {
  return new StartSlave;
}

void StartSlave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::RcNcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
    if (has_docker_image_info()) {
      if (docker_image_info_ != NULL) docker_image_info_->::RcNcProto::DockerImageInfo::Clear();
    }
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::RcNcProto::ResourceInfo::Clear();
    }
    listen_port_num_ = 0u;
    if (has_fm_master_net_address()) {
      if (fm_master_net_address_ != NULL) fm_master_net_address_->::RcNcProto::NetAddress::Clear();
    }
    if (has_rc_net_address()) {
      if (rc_net_address_ != NULL) rc_net_address_->::RcNcProto::NetAddress::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartSlave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }

      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_docker_image_info;
        break;
      }

      // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_docker_image_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_docker_image_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_resource_info;
        break;
      }

      // optional .RcNcProto.ResourceInfo resource_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_listen_port_num;
        break;
      }

      // optional uint32 listen_port_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &listen_port_num_)));
          set_has_listen_port_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_FM_master_net_address;
        break;
      }

      // optional .RcNcProto.NetAddress FM_master_net_address = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FM_master_net_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fm_master_net_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_RC_net_address;
        break;
      }

      // optional .RcNcProto.NetAddress RC_net_address = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RC_net_address:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rc_net_address()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartSlave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }

  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }

  // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
  if (has_docker_image_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->docker_image_info(), output);
  }

  // optional .RcNcProto.ResourceInfo resource_info = 4;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->resource_info(), output);
  }

  // optional uint32 listen_port_num = 5;
  if (has_listen_port_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->listen_port_num(), output);
  }

  // optional .RcNcProto.NetAddress FM_master_net_address = 6;
  if (has_fm_master_net_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fm_master_net_address(), output);
  }

  // optional .RcNcProto.NetAddress RC_net_address = 7;
  if (has_rc_net_address()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->rc_net_address(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartSlave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }

  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }

  // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
  if (has_docker_image_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->docker_image_info(), target);
  }

  // optional .RcNcProto.ResourceInfo resource_info = 4;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->resource_info(), target);
  }

  // optional uint32 listen_port_num = 5;
  if (has_listen_port_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->listen_port_num(), target);
  }

  // optional .RcNcProto.NetAddress FM_master_net_address = 6;
  if (has_fm_master_net_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fm_master_net_address(), target);
  }

  // optional .RcNcProto.NetAddress RC_net_address = 7;
  if (has_rc_net_address()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->rc_net_address(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartSlave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }

    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }

    // optional .RcNcProto.DockerImageInfo docker_image_info = 3;
    if (has_docker_image_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->docker_image_info());
    }

    // optional .RcNcProto.ResourceInfo resource_info = 4;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }

    // optional uint32 listen_port_num = 5;
    if (has_listen_port_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->listen_port_num());
    }

    // optional .RcNcProto.NetAddress FM_master_net_address = 6;
    if (has_fm_master_net_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fm_master_net_address());
    }

    // optional .RcNcProto.NetAddress RC_net_address = 7;
    if (has_rc_net_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rc_net_address());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartSlave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartSlave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartSlave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartSlave::MergeFrom(const StartSlave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::RcNcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
    if (from.has_docker_image_info()) {
      mutable_docker_image_info()->::RcNcProto::DockerImageInfo::MergeFrom(from.docker_image_info());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::RcNcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
    if (from.has_listen_port_num()) {
      set_listen_port_num(from.listen_port_num());
    }
    if (from.has_fm_master_net_address()) {
      mutable_fm_master_net_address()->::RcNcProto::NetAddress::MergeFrom(from.fm_master_net_address());
    }
    if (from.has_rc_net_address()) {
      mutable_rc_net_address()->::RcNcProto::NetAddress::MergeFrom(from.rc_net_address());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartSlave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartSlave::CopyFrom(const StartSlave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSlave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  if (has_docker_image_info()) {
    if (!this->docker_image_info().IsInitialized()) return false;
  }
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  if (has_fm_master_net_address()) {
    if (!this->fm_master_net_address().IsInitialized()) return false;
  }
  if (has_rc_net_address()) {
    if (!this->rc_net_address().IsInitialized()) return false;
  }
  return true;
}

void StartSlave::Swap(StartSlave* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    std::swap(docker_image_info_, other->docker_image_info_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(listen_port_num_, other->listen_port_num_);
    std::swap(fm_master_net_address_, other->fm_master_net_address_);
    std::swap(rc_net_address_, other->rc_net_address_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartSlave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartSlave_descriptor_;
  metadata.reflection = StartSlave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RespondStartSlave::kFrameworkInstanceInfoFieldNumber;
const int RespondStartSlave::kSelfModuleIdFieldNumber;
const int RespondStartSlave::kMachineIpFieldNumber;
const int RespondStartSlave::kModulePIDFieldNumber;
#endif  // !_MSC_VER

RespondStartSlave::RespondStartSlave()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RespondStartSlave::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::RcNcProto::FrameworkInstanceInfo*>(&::RcNcProto::FrameworkInstanceInfo::default_instance());
}

RespondStartSlave::RespondStartSlave(const RespondStartSlave& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RespondStartSlave::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  self_module_id_ = 0u;
  machine_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  module_pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RespondStartSlave::~RespondStartSlave() {
  SharedDtor();
}

void RespondStartSlave::SharedDtor() {
  if (machine_ip_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_ip_;
  }
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void RespondStartSlave::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RespondStartSlave::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RespondStartSlave_descriptor_;
}

const RespondStartSlave& RespondStartSlave::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

RespondStartSlave* RespondStartSlave::default_instance_ = NULL;

RespondStartSlave* RespondStartSlave::New() const {
  return new RespondStartSlave;
}

void RespondStartSlave::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::RcNcProto::FrameworkInstanceInfo::Clear();
    }
    self_module_id_ = 0u;
    if (has_machine_ip()) {
      if (machine_ip_ != &::google::protobuf::internal::kEmptyString) {
        machine_ip_->clear();
      }
    }
    module_pid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RespondStartSlave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_self_module_id;
        break;
      }

      // required uint32 self_module_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_self_module_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &self_module_id_)));
          set_has_self_module_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machine_ip;
        break;
      }

      // optional string machine_ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_ip().data(), this->machine_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_module_PID;
        break;
      }

      // optional uint32 module_PID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_PID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_pid_)));
          set_has_module_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RespondStartSlave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }

  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->self_module_id(), output);
  }

  // optional string machine_ip = 3;
  if (has_machine_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machine_ip(), output);
  }

  // optional uint32 module_PID = 4;
  if (has_module_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->module_pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RespondStartSlave::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }

  // required uint32 self_module_id = 2;
  if (has_self_module_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->self_module_id(), target);
  }

  // optional string machine_ip = 3;
  if (has_machine_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_ip().data(), this->machine_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machine_ip(), target);
  }

  // optional uint32 module_PID = 4;
  if (has_module_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->module_pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RespondStartSlave::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }

    // required uint32 self_module_id = 2;
    if (has_self_module_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->self_module_id());
    }

    // optional string machine_ip = 3;
    if (has_machine_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_ip());
    }

    // optional uint32 module_PID = 4;
    if (has_module_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RespondStartSlave::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RespondStartSlave* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RespondStartSlave*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RespondStartSlave::MergeFrom(const RespondStartSlave& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::RcNcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_self_module_id()) {
      set_self_module_id(from.self_module_id());
    }
    if (from.has_machine_ip()) {
      set_machine_ip(from.machine_ip());
    }
    if (from.has_module_pid()) {
      set_module_pid(from.module_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RespondStartSlave::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespondStartSlave::CopyFrom(const RespondStartSlave& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespondStartSlave::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void RespondStartSlave::Swap(RespondStartSlave* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(self_module_id_, other->self_module_id_);
    std::swap(machine_ip_, other->machine_ip_);
    std::swap(module_pid_, other->module_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RespondStartSlave::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RespondStartSlave_descriptor_;
  metadata.reflection = RespondStartSlave_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FrameworkResourceInfo::kFrameworkInstanceInfoFieldNumber;
const int FrameworkResourceInfo::kResourceInfoFieldNumber;
const int FrameworkResourceInfo::kModulePIDFieldNumber;
#endif  // !_MSC_VER

FrameworkResourceInfo::FrameworkResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FrameworkResourceInfo::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::RcNcProto::FrameworkInstanceInfo*>(&::RcNcProto::FrameworkInstanceInfo::default_instance());
  resource_info_ = const_cast< ::RcNcProto::ResourceInfo*>(&::RcNcProto::ResourceInfo::default_instance());
}

FrameworkResourceInfo::FrameworkResourceInfo(const FrameworkResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FrameworkResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  resource_info_ = NULL;
  module_pid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FrameworkResourceInfo::~FrameworkResourceInfo() {
  SharedDtor();
}

void FrameworkResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
    delete resource_info_;
  }
}

void FrameworkResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameworkResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FrameworkResourceInfo_descriptor_;
}

const FrameworkResourceInfo& FrameworkResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

FrameworkResourceInfo* FrameworkResourceInfo::default_instance_ = NULL;

FrameworkResourceInfo* FrameworkResourceInfo::New() const {
  return new FrameworkResourceInfo;
}

void FrameworkResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::RcNcProto::FrameworkInstanceInfo::Clear();
    }
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::RcNcProto::ResourceInfo::Clear();
    }
    module_pid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FrameworkResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_info;
        break;
      }

      // optional .RcNcProto.ResourceInfo resource_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_module_PID;
        break;
      }

      // optional uint32 module_PID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_PID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &module_pid_)));
          set_has_module_pid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FrameworkResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }

  // optional .RcNcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_info(), output);
  }

  // optional uint32 module_PID = 3;
  if (has_module_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->module_pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FrameworkResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }

  // optional .RcNcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_info(), target);
  }

  // optional uint32 module_PID = 3;
  if (has_module_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->module_pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FrameworkResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }

    // optional .RcNcProto.ResourceInfo resource_info = 2;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }

    // optional uint32 module_PID = 3;
    if (has_module_pid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->module_pid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameworkResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FrameworkResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FrameworkResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FrameworkResourceInfo::MergeFrom(const FrameworkResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::RcNcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::RcNcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
    if (from.has_module_pid()) {
      set_module_pid(from.module_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FrameworkResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameworkResourceInfo::CopyFrom(const FrameworkResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameworkResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void FrameworkResourceInfo::Swap(FrameworkResourceInfo* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(module_pid_, other->module_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FrameworkResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FrameworkResourceInfo_descriptor_;
  metadata.reflection = FrameworkResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CloseModule::kFrameworkInstanceInfoFieldNumber;
const int CloseModule::kModulePIDFieldNumber;
#endif  // !_MSC_VER

CloseModule::CloseModule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CloseModule::InitAsDefaultInstance() {
  framework_instance_info_ = const_cast< ::RcNcProto::FrameworkInstanceInfo*>(&::RcNcProto::FrameworkInstanceInfo::default_instance());
}

CloseModule::CloseModule(const CloseModule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CloseModule::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CloseModule::~CloseModule() {
  SharedDtor();
}

void CloseModule::SharedDtor() {
  if (this != default_instance_) {
    delete framework_instance_info_;
  }
}

void CloseModule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CloseModule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CloseModule_descriptor_;
}

const CloseModule& CloseModule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

CloseModule* CloseModule::default_instance_ = NULL;

CloseModule* CloseModule::New() const {
  return new CloseModule;
}

void CloseModule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_framework_instance_info()) {
      if (framework_instance_info_ != NULL) framework_instance_info_->::RcNcProto::FrameworkInstanceInfo::Clear();
    }
  }
  module_pid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CloseModule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_framework_instance_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_PID;
        break;
      }

      // repeated uint32 module_PID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_module_PID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_module_pid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_module_pid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_module_PID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CloseModule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->framework_instance_info(), output);
  }

  // repeated uint32 module_PID = 2;
  for (int i = 0; i < this->module_pid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->module_pid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CloseModule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
  if (has_framework_instance_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->framework_instance_info(), target);
  }

  // repeated uint32 module_PID = 2;
  for (int i = 0; i < this->module_pid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->module_pid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CloseModule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.FrameworkInstanceInfo framework_instance_info = 1;
    if (has_framework_instance_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->framework_instance_info());
    }

  }
  // repeated uint32 module_PID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->module_pid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->module_pid(i));
    }
    total_size += 1 * this->module_pid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CloseModule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CloseModule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CloseModule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CloseModule::MergeFrom(const CloseModule& from) {
  GOOGLE_CHECK_NE(&from, this);
  module_pid_.MergeFrom(from.module_pid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_info()) {
      mutable_framework_instance_info()->::RcNcProto::FrameworkInstanceInfo::MergeFrom(from.framework_instance_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CloseModule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CloseModule::CopyFrom(const CloseModule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseModule::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_framework_instance_info()) {
    if (!this->framework_instance_info().IsInitialized()) return false;
  }
  return true;
}

void CloseModule::Swap(CloseModule* other) {
  if (other != this) {
    std::swap(framework_instance_info_, other->framework_instance_info_);
    module_pid_.Swap(&other->module_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CloseModule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CloseModule_descriptor_;
  metadata.reflection = CloseModule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineResourceInfo::kCpuMemSizeFieldNumber;
const int MachineResourceInfo::kCpuNumFieldNumber;
const int MachineResourceInfo::kNetSpeedFieldNumber;
const int MachineResourceInfo::kDiskSizeFieldNumber;
const int MachineResourceInfo::kGpuNumFieldNumber;
const int MachineResourceInfo::kGpuResourceInfoFieldNumber;
#endif  // !_MSC_VER

MachineResourceInfo::MachineResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineResourceInfo::InitAsDefaultInstance() {
}

MachineResourceInfo::MachineResourceInfo(const MachineResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  cpu_mem_size_ = 0u;
  cpu_num_ = 0;
  net_speed_ = 0u;
  disk_size_ = 0u;
  gpu_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineResourceInfo::~MachineResourceInfo() {
  SharedDtor();
}

void MachineResourceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MachineResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineResourceInfo_descriptor_;
}

const MachineResourceInfo& MachineResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

MachineResourceInfo* MachineResourceInfo::default_instance_ = NULL;

MachineResourceInfo* MachineResourceInfo::New() const {
  return new MachineResourceInfo;
}

void MachineResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cpu_mem_size_ = 0u;
    cpu_num_ = 0;
    net_speed_ = 0u;
    disk_size_ = 0u;
    gpu_num_ = 0u;
  }
  gpu_resource_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 cpu_mem_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_mem_size_)));
          set_has_cpu_mem_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_cpu_num;
        break;
      }

      // optional double cpu_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cpu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cpu_num_)));
          set_has_cpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_net_speed;
        break;
      }

      // optional uint32 net_speed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_net_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &net_speed_)));
          set_has_net_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_disk_size;
        break;
      }

      // optional uint32 disk_size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &disk_size_)));
          set_has_disk_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gpu_num;
        break;
      }

      // optional uint32 gpu_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gpu_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gpu_num_)));
          set_has_gpu_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gpu_resource_info;
        break;
      }

      // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gpu_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpu_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_gpu_resource_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 cpu_mem_size = 1;
  if (has_cpu_mem_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->cpu_mem_size(), output);
  }

  // optional double cpu_num = 2;
  if (has_cpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cpu_num(), output);
  }

  // optional uint32 net_speed = 3;
  if (has_net_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->net_speed(), output);
  }

  // optional uint32 disk_size = 4;
  if (has_disk_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->disk_size(), output);
  }

  // optional uint32 gpu_num = 5;
  if (has_gpu_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->gpu_num(), output);
  }

  // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 6;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gpu_resource_info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 cpu_mem_size = 1;
  if (has_cpu_mem_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->cpu_mem_size(), target);
  }

  // optional double cpu_num = 2;
  if (has_cpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cpu_num(), target);
  }

  // optional uint32 net_speed = 3;
  if (has_net_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->net_speed(), target);
  }

  // optional uint32 disk_size = 4;
  if (has_disk_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->disk_size(), target);
  }

  // optional uint32 gpu_num = 5;
  if (has_gpu_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->gpu_num(), target);
  }

  // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 6;
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gpu_resource_info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 cpu_mem_size = 1;
    if (has_cpu_mem_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cpu_mem_size());
    }

    // optional double cpu_num = 2;
    if (has_cpu_num()) {
      total_size += 1 + 8;
    }

    // optional uint32 net_speed = 3;
    if (has_net_speed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->net_speed());
    }

    // optional uint32 disk_size = 4;
    if (has_disk_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->disk_size());
    }

    // optional uint32 gpu_num = 5;
    if (has_gpu_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gpu_num());
    }

  }
  // repeated .RcNcProto.GpuResourceInfo gpu_resource_info = 6;
  total_size += 1 * this->gpu_resource_info_size();
  for (int i = 0; i < this->gpu_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpu_resource_info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineResourceInfo::MergeFrom(const MachineResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpu_resource_info_.MergeFrom(from.gpu_resource_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cpu_mem_size()) {
      set_cpu_mem_size(from.cpu_mem_size());
    }
    if (from.has_cpu_num()) {
      set_cpu_num(from.cpu_num());
    }
    if (from.has_net_speed()) {
      set_net_speed(from.net_speed());
    }
    if (from.has_disk_size()) {
      set_disk_size(from.disk_size());
    }
    if (from.has_gpu_num()) {
      set_gpu_num(from.gpu_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineResourceInfo::CopyFrom(const MachineResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gpu_resource_info_size(); i++) {
    if (!this->gpu_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void MachineResourceInfo::Swap(MachineResourceInfo* other) {
  if (other != this) {
    std::swap(cpu_mem_size_, other->cpu_mem_size_);
    std::swap(cpu_num_, other->cpu_num_);
    std::swap(net_speed_, other->net_speed_);
    std::swap(disk_size_, other->disk_size_);
    std::swap(gpu_num_, other->gpu_num_);
    gpu_resource_info_.Swap(&other->gpu_resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineResourceInfo_descriptor_;
  metadata.reflection = MachineResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerResourceInfo::kFrameworkInstanceIdFieldNumber;
const int ContainerResourceInfo::kResourceInfoFieldNumber;
#endif  // !_MSC_VER

ContainerResourceInfo::ContainerResourceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerResourceInfo::InitAsDefaultInstance() {
  resource_info_ = const_cast< ::RcNcProto::ResourceInfo*>(&::RcNcProto::ResourceInfo::default_instance());
}

ContainerResourceInfo::ContainerResourceInfo(const ContainerResourceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerResourceInfo::SharedCtor() {
  _cached_size_ = 0;
  framework_instance_id_ = 0u;
  resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerResourceInfo::~ContainerResourceInfo() {
  SharedDtor();
}

void ContainerResourceInfo::SharedDtor() {
  if (this != default_instance_) {
    delete resource_info_;
  }
}

void ContainerResourceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerResourceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerResourceInfo_descriptor_;
}

const ContainerResourceInfo& ContainerResourceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

ContainerResourceInfo* ContainerResourceInfo::default_instance_ = NULL;

ContainerResourceInfo* ContainerResourceInfo::New() const {
  return new ContainerResourceInfo;
}

void ContainerResourceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    framework_instance_id_ = 0u;
    if (has_resource_info()) {
      if (resource_info_ != NULL) resource_info_->::RcNcProto::ResourceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerResourceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 framework_instance_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &framework_instance_id_)));
          set_has_framework_instance_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_resource_info;
        break;
      }

      // optional .RcNcProto.ResourceInfo resource_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerResourceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->framework_instance_id(), output);
  }

  // optional .RcNcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->resource_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerResourceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 framework_instance_id = 1;
  if (has_framework_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->framework_instance_id(), target);
  }

  // optional .RcNcProto.ResourceInfo resource_info = 2;
  if (has_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->resource_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerResourceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 framework_instance_id = 1;
    if (has_framework_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->framework_instance_id());
    }

    // optional .RcNcProto.ResourceInfo resource_info = 2;
    if (has_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->resource_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerResourceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerResourceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerResourceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerResourceInfo::MergeFrom(const ContainerResourceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_framework_instance_id()) {
      set_framework_instance_id(from.framework_instance_id());
    }
    if (from.has_resource_info()) {
      mutable_resource_info()->::RcNcProto::ResourceInfo::MergeFrom(from.resource_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerResourceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerResourceInfo::CopyFrom(const ContainerResourceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerResourceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_resource_info()) {
    if (!this->resource_info().IsInitialized()) return false;
  }
  return true;
}

void ContainerResourceInfo::Swap(ContainerResourceInfo* other) {
  if (other != this) {
    std::swap(framework_instance_id_, other->framework_instance_id_);
    std::swap(resource_info_, other->resource_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerResourceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerResourceInfo_descriptor_;
  metadata.reflection = ContainerResourceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonitorInfo::kTotalMachineResourceInfoFieldNumber;
const int MonitorInfo::kUsageMachineResourceInfoFieldNumber;
const int MonitorInfo::kRestMachineResourceInfoFieldNumber;
const int MonitorInfo::kContainerRequireResourceInfoFieldNumber;
const int MonitorInfo::kContainerUsageResourceInfoFieldNumber;
const int MonitorInfo::kCrashMoudleIdFieldNumber;
#endif  // !_MSC_VER

MonitorInfo::MonitorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonitorInfo::InitAsDefaultInstance() {
  total_machine_resource_info_ = const_cast< ::RcNcProto::MachineResourceInfo*>(&::RcNcProto::MachineResourceInfo::default_instance());
  usage_machine_resource_info_ = const_cast< ::RcNcProto::MachineResourceInfo*>(&::RcNcProto::MachineResourceInfo::default_instance());
  rest_machine_resource_info_ = const_cast< ::RcNcProto::ResourceInfo*>(&::RcNcProto::ResourceInfo::default_instance());
}

MonitorInfo::MonitorInfo(const MonitorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonitorInfo::SharedCtor() {
  _cached_size_ = 0;
  total_machine_resource_info_ = NULL;
  usage_machine_resource_info_ = NULL;
  rest_machine_resource_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorInfo::~MonitorInfo() {
  SharedDtor();
}

void MonitorInfo::SharedDtor() {
  if (this != default_instance_) {
    delete total_machine_resource_info_;
    delete usage_machine_resource_info_;
    delete rest_machine_resource_info_;
  }
}

void MonitorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorInfo_descriptor_;
}

const MonitorInfo& MonitorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RcNcProtocol_2eproto();
  return *default_instance_;
}

MonitorInfo* MonitorInfo::default_instance_ = NULL;

MonitorInfo* MonitorInfo::New() const {
  return new MonitorInfo;
}

void MonitorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_total_machine_resource_info()) {
      if (total_machine_resource_info_ != NULL) total_machine_resource_info_->::RcNcProto::MachineResourceInfo::Clear();
    }
    if (has_usage_machine_resource_info()) {
      if (usage_machine_resource_info_ != NULL) usage_machine_resource_info_->::RcNcProto::MachineResourceInfo::Clear();
    }
    if (has_rest_machine_resource_info()) {
      if (rest_machine_resource_info_ != NULL) rest_machine_resource_info_->::RcNcProto::ResourceInfo::Clear();
    }
  }
  container_require_resource_info_.Clear();
  container_usage_resource_info_.Clear();
  crash_moudle_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonitorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RcNcProto.MachineResourceInfo total_machine_resource_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_machine_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_usage_machine_resource_info;
        break;
      }

      // optional .RcNcProto.MachineResourceInfo usage_machine_resource_info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_usage_machine_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_usage_machine_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rest_machine_resource_info;
        break;
      }

      // optional .RcNcProto.ResourceInfo rest_machine_resource_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rest_machine_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rest_machine_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_container_require_resource_info;
        break;
      }

      // repeated .RcNcProto.ContainerResourceInfo container_require_resource_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_require_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_container_require_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_container_require_resource_info;
        if (input->ExpectTag(42)) goto parse_container_usage_resource_info;
        break;
      }

      // repeated .RcNcProto.ContainerResourceInfo container_usage_resource_info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_container_usage_resource_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_container_usage_resource_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_container_usage_resource_info;
        if (input->ExpectTag(48)) goto parse_crash_moudle_id;
        break;
      }

      // repeated uint32 crash_moudle_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crash_moudle_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 48, input, this->mutable_crash_moudle_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_crash_moudle_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_crash_moudle_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonitorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RcNcProto.MachineResourceInfo total_machine_resource_info = 1;
  if (has_total_machine_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->total_machine_resource_info(), output);
  }

  // optional .RcNcProto.MachineResourceInfo usage_machine_resource_info = 2;
  if (has_usage_machine_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->usage_machine_resource_info(), output);
  }

  // optional .RcNcProto.ResourceInfo rest_machine_resource_info = 3;
  if (has_rest_machine_resource_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rest_machine_resource_info(), output);
  }

  // repeated .RcNcProto.ContainerResourceInfo container_require_resource_info = 4;
  for (int i = 0; i < this->container_require_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->container_require_resource_info(i), output);
  }

  // repeated .RcNcProto.ContainerResourceInfo container_usage_resource_info = 5;
  for (int i = 0; i < this->container_usage_resource_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->container_usage_resource_info(i), output);
  }

  // repeated uint32 crash_moudle_id = 6;
  for (int i = 0; i < this->crash_moudle_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      6, this->crash_moudle_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonitorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RcNcProto.MachineResourceInfo total_machine_resource_info = 1;
  if (has_total_machine_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->total_machine_resource_info(), target);
  }

  // optional .RcNcProto.MachineResourceInfo usage_machine_resource_info = 2;
  if (has_usage_machine_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->usage_machine_resource_info(), target);
  }

  // optional .RcNcProto.ResourceInfo rest_machine_resource_info = 3;
  if (has_rest_machine_resource_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rest_machine_resource_info(), target);
  }

  // repeated .RcNcProto.ContainerResourceInfo container_require_resource_info = 4;
  for (int i = 0; i < this->container_require_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->container_require_resource_info(i), target);
  }

  // repeated .RcNcProto.ContainerResourceInfo container_usage_resource_info = 5;
  for (int i = 0; i < this->container_usage_resource_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->container_usage_resource_info(i), target);
  }

  // repeated uint32 crash_moudle_id = 6;
  for (int i = 0; i < this->crash_moudle_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(6, this->crash_moudle_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonitorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RcNcProto.MachineResourceInfo total_machine_resource_info = 1;
    if (has_total_machine_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_machine_resource_info());
    }

    // optional .RcNcProto.MachineResourceInfo usage_machine_resource_info = 2;
    if (has_usage_machine_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->usage_machine_resource_info());
    }

    // optional .RcNcProto.ResourceInfo rest_machine_resource_info = 3;
    if (has_rest_machine_resource_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rest_machine_resource_info());
    }

  }
  // repeated .RcNcProto.ContainerResourceInfo container_require_resource_info = 4;
  total_size += 1 * this->container_require_resource_info_size();
  for (int i = 0; i < this->container_require_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container_require_resource_info(i));
  }

  // repeated .RcNcProto.ContainerResourceInfo container_usage_resource_info = 5;
  total_size += 1 * this->container_usage_resource_info_size();
  for (int i = 0; i < this->container_usage_resource_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->container_usage_resource_info(i));
  }

  // repeated uint32 crash_moudle_id = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->crash_moudle_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->crash_moudle_id(i));
    }
    total_size += 1 * this->crash_moudle_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonitorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonitorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonitorInfo::MergeFrom(const MonitorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  container_require_resource_info_.MergeFrom(from.container_require_resource_info_);
  container_usage_resource_info_.MergeFrom(from.container_usage_resource_info_);
  crash_moudle_id_.MergeFrom(from.crash_moudle_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_machine_resource_info()) {
      mutable_total_machine_resource_info()->::RcNcProto::MachineResourceInfo::MergeFrom(from.total_machine_resource_info());
    }
    if (from.has_usage_machine_resource_info()) {
      mutable_usage_machine_resource_info()->::RcNcProto::MachineResourceInfo::MergeFrom(from.usage_machine_resource_info());
    }
    if (from.has_rest_machine_resource_info()) {
      mutable_rest_machine_resource_info()->::RcNcProto::ResourceInfo::MergeFrom(from.rest_machine_resource_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonitorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorInfo::CopyFrom(const MonitorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_total_machine_resource_info()) {
    if (!this->total_machine_resource_info().IsInitialized()) return false;
  }
  if (has_usage_machine_resource_info()) {
    if (!this->usage_machine_resource_info().IsInitialized()) return false;
  }
  if (has_rest_machine_resource_info()) {
    if (!this->rest_machine_resource_info().IsInitialized()) return false;
  }
  for (int i = 0; i < container_require_resource_info_size(); i++) {
    if (!this->container_require_resource_info(i).IsInitialized()) return false;
  }
  for (int i = 0; i < container_usage_resource_info_size(); i++) {
    if (!this->container_usage_resource_info(i).IsInitialized()) return false;
  }
  return true;
}

void MonitorInfo::Swap(MonitorInfo* other) {
  if (other != this) {
    std::swap(total_machine_resource_info_, other->total_machine_resource_info_);
    std::swap(usage_machine_resource_info_, other->usage_machine_resource_info_);
    std::swap(rest_machine_resource_info_, other->rest_machine_resource_info_);
    container_require_resource_info_.Swap(&other->container_require_resource_info_);
    container_usage_resource_info_.Swap(&other->container_usage_resource_info_);
    crash_moudle_id_.Swap(&other->crash_moudle_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonitorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorInfo_descriptor_;
  metadata.reflection = MonitorInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RcNcProto

// @@protoc_insertion_point(global_scope)
